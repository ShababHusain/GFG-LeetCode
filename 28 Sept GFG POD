class Solution {

    public ArrayList<Integer> longestSubarray(int[] arr, int x) {
        int n = arr.length;
        TreeMap<Integer, Integer> window = new TreeMap<>();
        int start = 0, maxLen = 0, bestStart = 0;

        for (int end = 0; end < n; end++) {
            window.put(arr[end], window.getOrDefault(arr[end], 0) + 1);

            // Shrink window if condition violated
            while (window.lastKey() - window.firstKey() > x) {
                window.put(arr[start], window.get(arr[start]) - 1);
                if (window.get(arr[start]) == 0) {
                    window.remove(arr[start]);
                }
                start++;
            }

            // Update longest valid window
            if (end - start + 1 > maxLen) {
                maxLen = end - start + 1;
                bestStart = start;
            }
        }

        ArrayList<Integer> result = new ArrayList<>();
        for (int i = bestStart; i < bestStart + maxLen; i++) {
            result.add(arr[i]);
        }
        return result;
    }
}

class Solution {
    public int minJumps(int[] arr) {
        int n = arr.length;

        // If the array has only one element, no jumps needed
        if (n <= 1) return 0;

        // If the first element is 0, we can't move anywhere
        if (arr[0] == 0) return -1;

        int jumps = 1;         // At least one jump needed
        int farthest = arr[0]; // Farthest index reachable
        int currentEnd = arr[0]; // End of the current jump range

        for (int i = 1; i < n; i++) {
            // If we've reached the end of the array
            if (i == n - 1) return jumps;

            // Update the farthest index we can reach
            farthest = Math.max(farthest, i + arr[i]);

            // If we've reached the end of the current jump range
            if (i == currentEnd) {
                jumps++;
                currentEnd = farthest;

                // If currentEnd is still behind, we can't proceed
                if (i >= currentEnd) return -1;
            }
        }

        return -1;
    }
}

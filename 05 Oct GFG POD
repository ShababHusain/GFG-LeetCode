import java.util.*;

class Solution {
    public ArrayList<String> ratInMaze(int[][] maze) {
        int n = maze.length;
        ArrayList<String> ans = new ArrayList<>();
        if (maze[0][0] == 0 || maze[n - 1][n - 1] == 0) return ans; // No path possible
        
        boolean[][] visited = new boolean[n][n];
        visited[0][0] = true;
        
        solve(0, 0, maze, n, new StringBuilder(), ans, visited);
        return ans;
    }

    private void solve(int i, int j, int[][] maze, int n, StringBuilder path, ArrayList<String> ans, boolean[][] visited) {
        // Base case: reached destination
        if (i == n - 1 && j == n - 1) {
            ans.add(path.toString());
            return;
        }

        // Directions in lexicographic order: D, L, R, U
        int[] di = {1, 0, 0, -1};
        int[] dj = {0, -1, 1, 0};
        char[] dir = {'D', 'L', 'R', 'U'};

        for (int k = 0; k < 4; k++) {
            int ni = i + di[k];
            int nj = j + dj[k];

            if (ni >= 0 && nj >= 0 && ni < n && nj < n && maze[ni][nj] == 1 && !visited[ni][nj]) {
                visited[ni][nj] = true;
                path.append(dir[k]);

                solve(ni, nj, maze, n, path, ans, visited);

                // Backtrack
                path.deleteCharAt(path.length() - 1);
                visited[ni][nj] = false;
            }
        }
    }
}

class Solution {
    public int sumOfModes(int[] arr, int k) {
        // code here
        Map<Integer,Integer> freq= new HashMap<>();
        TreeMap<Integer, TreeSet<Integer>> countMap= new TreeMap<>();
        int sum=0;
        
        for(int i=0; i<arr.length; i++){
            int num=arr[i];
            int oldFreq=freq.getOrDefault(num,0);
            int newFreq=oldFreq+1;
            freq.put(num,newFreq);
            
            if(oldFreq>0){
                TreeSet<Integer> oldSet=countMap.get(oldFreq);
                oldSet.remove(num);
                if(oldSet.isEmpty()) countMap.remove(oldFreq);
                
            }
            countMap.computeIfAbsent(newFreq, x-> new TreeSet<>()).add(num);
            if(i>=k){
                int outNum=arr[i-k];
                int outFreq=freq.get(outNum);
                freq.put(outNum, outFreq-1);
                
                TreeSet<Integer> outSet=countMap.get(outFreq);
                outSet.remove(outNum);
                if(outSet.isEmpty()) countMap.remove(outFreq);
                
                if(outFreq-1>0){
                    countMap.computeIfAbsent(outFreq-1,x-> new TreeSet<>()).add(outNum);
                }else{
                    freq.remove(outNum);
                }
            }
            if(i>=k-1){
                int maxFreq= countMap.lastKey();
                int mode=countMap.get(maxFreq).first();
                sum+=mode;
            }
        }
        return sum;
    }
}

class Solution {
    public ArrayList<ArrayList<Integer>> kSmallestPair(int[] arr1, int[] arr2, int k) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        if (arr1.length == 0 || arr2.length == 0 || k == 0) return result;

        PriorityQueue<int[]> minHeap = new PriorityQueue<>(
            Comparator.comparingInt(a -> arr1[a[0]] + arr2[a[1]])
        );

        // Initialize heap with pairs (arr1[i], arr2[0])
        for (int i = 0; i < Math.min(k, arr1.length); i++) {
            minHeap.offer(new int[]{i, 0});
        }

        while (k-- > 0 && !minHeap.isEmpty()) {
            int[] indices = minHeap.poll();
            int i = indices[0], j = indices[1];

            ArrayList<Integer> pair = new ArrayList<>();
            pair.add(arr1[i]);
            pair.add(arr2[j]);
            result.add(pair);

            if (j + 1 < arr2.length) {
                minHeap.offer(new int[]{i, j + 1});
            }
        }

        return result;
    }
}

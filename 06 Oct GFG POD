class Solution {
    public static ArrayList<ArrayList<Integer>> knightTour(int n) {
        ArrayList<ArrayList<Integer>> board = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            ArrayList<Integer> row = new ArrayList<>(Collections.nCopies(n, -1));
            board.add(row);
        }

        int[] dx = {2, 1, -1, -2, -2, -1, 1, 2};
        int[] dy = {1, 2, 2, 1, -1, -2, -2, -1};

        board.get(0).set(0, 0); // Start at (0,0)
        if (solve(0, 0, 1, board, dx, dy, n)) {
            return board;
        } else {
            return new ArrayList<>(); // No solution
        }
    }

    private static boolean solve(int x, int y, int move, ArrayList<ArrayList<Integer>> board,
                                 int[] dx, int[] dy, int n) {
        if (move == n * n) return true;

        for (int i = 0; i < 8; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (isValid(nx, ny, board, n)) {
                board.get(nx).set(ny, move);
                if (solve(nx, ny, move + 1, board, dx, dy, n)) return true;
                board.get(nx).set(ny, -1); // Backtrack
            }
        }

        return false;
    }

    private static boolean isValid(int x, int y, ArrayList<ArrayList<Integer>> board, int n) {
        return x >= 0 && y >= 0 && x < n && y < n && board.get(x).get(y) == -1;
    }
}

/*
class Node {
    int data;
    Node next;

    Node(int x) {
        data = x;
        next = null;
    }
}
*/
class Solution {
    Node mergeKLists(Node[] arr) {
        PriorityQueue<Node> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a.data));

        // Add the head of each list to the heap
        for (Node node : arr) {
            if (node != null) {
                minHeap.add(node);
            }
        }

        Node dummy = new Node(-1);
        Node tail = dummy;

        // Build the merged list
        while (!minHeap.isEmpty()) {
            Node curr = minHeap.poll();
            tail.next = curr;
            tail = tail.next;

            if (curr.next != null) {
                minHeap.add(curr.next);
            }
        }

        return dummy.next;
    }
}

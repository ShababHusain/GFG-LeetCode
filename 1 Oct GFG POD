class Solution {
    public static ArrayList<ArrayList<Integer>> uniquePerms(int[] arr) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        Arrays.sort(arr); // Sort to handle duplicates and ensure sorted output
        boolean[] visited = new boolean[arr.length];
        backtrack(arr, new ArrayList<>(), visited, result);
        return result;
    }

    private static void backtrack(int[] arr, ArrayList<Integer> temp, boolean[] visited, ArrayList<ArrayList<Integer>> result) {
        if (temp.size() == arr.length) {
            result.add(new ArrayList<>(temp));
            return;
        }

        for (int i = 0; i < arr.length; i++) {
            if (visited[i]) continue;

            // Skip duplicates: only use the first unvisited occurrence
            if (i > 0 && arr[i] == arr[i - 1] && !visited[i - 1]) continue;

            visited[i] = true;
            temp.add(arr[i]);
            backtrack(arr, temp, visited, result);
            temp.remove(temp.size() - 1);
            visited[i] = false;
        }
    }
}
class Solution {
    public static ArrayList<ArrayList<Integer>> uniquePerms(int[] arr) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        Arrays.sort(arr); // Sort to handle duplicates and ensure sorted output
        boolean[] visited = new boolean[arr.length];
        backtrack(arr, new ArrayList<>(), visited, result);
        return result;
    }

    private static void backtrack(int[] arr, ArrayList<Integer> temp, boolean[] visited, ArrayList<ArrayList<Integer>> result) {
        if (temp.size() == arr.length) {
            result.add(new ArrayList<>(temp));
            return;
        }

        for (int i = 0; i < arr.length; i++) {
            if (visited[i]) continue;

            // Skip duplicates: only use the first unvisited occurrence
            if (i > 0 && arr[i] == arr[i - 1] && !visited[i - 1]) continue;

            visited[i] = true;
            temp.add(arr[i]);
            backtrack(arr, temp, visited, result);
            temp.remove(temp.size() - 1);
            visited[i] = false;
        }
    }
}
